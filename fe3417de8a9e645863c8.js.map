{"version":3,"sources":["webpack:///./node_modules/@ecomplus/widget-search-engine/src/index.js"],"names":["options","elId","$searchEngine","document","getElementById","getScopedSlots","window","storefront","urlParams","URLSearchParams","location","search","props","term","get","page","parseInt","brands","getAll","categories","forEach","resource","dataset","JSON","parse","err","console","error","length","charAt","toUpperCase","slice","defaultSort","hasPopularItems","body","Error","Vue","render","h","SearchEngine","attrs","id","scopedSlots","undefined","$mount"],"mappings":";00BASe,WAACA,EAAU,GAAIC,EAAO,mBACnC,MAAMC,EAAgBC,SAASC,eAAeH,GAC9C,GAAIC,EAAe,CACjB,MAAMG,EAAiBC,OAAOC,YAAcD,OAAOC,WAAWF,eAExDG,EAAY,IAAIC,gBAAgBH,OAAOI,SAASC,QAChDC,EAAQ,EAAH,KACNZ,EAAQY,OADF,IAETC,KAAML,EAAUM,IAAI,QACpBC,KAAMC,SAASR,EAAUM,IAAI,QAAS,KAAO,EAC7CG,OAAQT,EAAUU,OAAO,YACzBC,WAAYX,EAAUU,OAAO,kBAG9B,CAAC,SAAU,cAAcE,QAAQC,IAChC,GAAInB,EAAcoB,QAAQD,GAAW,CACnC,IACET,EAAMS,GAAYE,KAAKC,MAAMtB,EAAcoB,QAAQD,IACnD,MAAOI,GAEP,YADAC,QAAQC,MAAMF,GAGZb,EAAMS,IAAaT,EAAMS,GAAUO,OAAS,IAC9ChB,EAAM,UAAD,OAAWS,EAASQ,OAAO,GAAGC,eAA9B,OAA8CT,EAASU,MAAM,MAAQ,GAE5EnB,EAAMoB,YAAc,QACpBpB,EAAMqB,iBAAkB,KAI5B,MAAM,SAAEZ,GAAaf,OAAOH,SAAS+B,KAAKZ,QAC1C,OAAQD,GACN,IAAK,SACL,IAAK,aACH,IAAKT,EAAMS,KAAcT,EAAMS,GAAUO,OAEvC,YADAF,QAAQC,MAAM,IAAIQ,MAAJ,4CAA+Cd,EAA/C,cAKpB,IAAIe,IAAI,CACNC,OAAQC,GAAKA,EAAEC,IAAc,CAC3BC,MAAO,CACLC,GAAIxC,GAENW,QACA8B,YAAuC,mBAAnBrC,EAChBA,EAAeH,EAAeoC,QAC9BK,MAELC,OAAO1C","file":"fe3417de8a9e645863c8.js","sourcesContent":["/*!\n * @ecomplus/widget-search-engine\n * (c) E-Com Club <ti@e-com.club>\n * Released under the MIT License.\n */\n\nimport Vue from 'vue'\nimport SearchEngine from '#components/SearchEngine.vue'\n\nexport default (options = {}, elId = 'search-engine') => {\n  const $searchEngine = document.getElementById(elId)\n  if ($searchEngine) {\n    const getScopedSlots = window.storefront && window.storefront.getScopedSlots\n\n    const urlParams = new URLSearchParams(window.location.search)\n    const props = {\n      ...options.props,\n      term: urlParams.get('term'),\n      page: parseInt(urlParams.get('page'), 10) || 1,\n      brands: urlParams.getAll('brands[]'),\n      categories: urlParams.getAll('categories[]')\n    }\n\n    ;['brands', 'categories'].forEach(resource => {\n      if ($searchEngine.dataset[resource]) {\n        try {\n          props[resource] = JSON.parse($searchEngine.dataset[resource])\n        } catch (err) {\n          console.error(err)\n          return\n        }\n        if (props[resource] && props[resource].length < 2) {\n          props[`isFixed${resource.charAt(0).toUpperCase()}${resource.slice(1)}`] = true\n        }\n        props.defaultSort = 'sales'\n        props.hasPopularItems = false\n      }\n    })\n\n    const { resource } = window.document.body.dataset\n    switch (resource) {\n      case 'brands':\n      case 'categories':\n        if (!props[resource] || !props[resource].length) {\n          console.error(new Error(`Skipping SearchEngine with empty '${resource}' filter`))\n          return\n        }\n    }\n\n    new Vue({\n      render: h => h(SearchEngine, {\n        attrs: {\n          id: elId\n        },\n        props,\n        scopedSlots: typeof getScopedSlots === 'function'\n          ? getScopedSlots($searchEngine, h)\n          : undefined\n      })\n    }).$mount($searchEngine)\n  }\n}\n"],"sourceRoot":""}